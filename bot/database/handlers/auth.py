from typing import Optional

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.core import db_handler
from bot.database.models import User


@db_handler
async def check_if_auth(session: AsyncSession, uid: int) -> Optional[User]:
    """
    Asynchronously checks if a user with the given UID exists in the database.

    Args:
        uid (int): The unique identifier of the user to check.
        session (AsyncSession): automatically generated by the db_handler decorator.

    Returns:
        Optional[User]: The User object if a user with the given UID exists,
        otherwise None.
    """
    return (
        await session.execute(select(User).where(User.id == uid))
    ).scalars().first()

@db_handler
async def add_user(session: AsyncSession, user: User) -> User:
    """Asynchronously adds a new user to the database.

    Args:
        user (User): The User object to add.
        session (AsyncSession): Automatically generated by the db_handler decorator.

    Returns:
        User: The newly created User object.
    """
    session.add(user)
    await session.commit()
    return user
