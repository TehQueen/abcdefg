"""
This module initializes and exports middleware components for the bot.

Modules:
    throttle: Contains the `AdvancedThrottleMiddleware` class, which is responsible
              for rate-limiting and throttling requests to ensure proper handling of
              incoming traffic.
    translation: Contains the `SimpleI18nMiddleware` class, which provides
              internationalization and localization support for the bot.
Exports:
    ThrottleMiddleware: Middleware for handling request throttling.
    IncludeHelper: Helper class for registering middlewares to routers.
"""
import sys
import logging

from typing import Protocol

from aiogram import BaseMiddleware, Router
from aiogram.utils.i18n import SimpleI18nMiddleware

from bot.middlewares.throttle import AdvancedThrottleMiddleware


class IncludeMeta(Protocol):
    """
    Meta class to define the structure of inner middlewares for the current module.
    """
    class AdvancedThrottleMiddleware(AdvancedThrottleMiddleware):
        ...
    class SimpleI18nMiddleware(SimpleI18nMiddleware):
        ...


class MiddlewareFactory(Protocol):
    """
    MiddlewareFactory is a protocol that defines a callable interface for creating
    a list of middleware instances. Classes or functions implementing this protocol
    should accept a module of type `IncludeMeta` and return a list of `BaseMiddleware`
    instances.

    Methods:
        __call__(module: Type[IncludeMeta]) -> List[BaseMiddleware]:
            A callable method that takes a module of type `IncludeMeta` and returns
            a list of middleware instances.
    """
    def __call__(self, module: IncludeMeta) -> list[BaseMiddleware]:
        ...

class IncludeHelper:
    def __init__(self, factory: MiddlewareFactory,
                 outer_middleware: bool = True) -> None:
        """
        Initializes the middleware with the given factory and configuration.
        
        Args:
            factory (MiddlewareFactory): The factory responsible for creating middleware instances.
            outer_middleware (bool, optional): Indicates whether the middleware is an outer middleware. 
                Defaults to True.
        """
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"Registering middlewares for {__package__}")
        self.factory = factory
        self.outer_middleware = outer_middleware

    def __rmatmul__(self, router: Router) -> bool:
        """
        Implements the reverse matrix multiplication operator (`@`) for registering middlewares
        to a router.
        This method is invoked when the `@` operator is used with the router on the left-hand side
        and an instance of this class on the right-hand side. It attempts to register all middlewares
        provided by the `self.factory` method to the appropriate middleware target in the router.

        Args:
            router (Router): The router instance to which the middlewares will be registered.

        Returns:
            bool: True if all middlewares were successfully registered, False otherwise.

        Behavior:
            - Iterates through the middlewares generated by `self.factory`.
            - Determines the target middleware based on whether `self.outer_middleware` is set.
            - Registers each middleware to the determined target middleware.
            - Logs the registration of each middleware.
            - Catches and logs any exceptions that occur during the registration process.
            
        Exceptions:
            - Logs a warning if an error occurs during middleware registration and returns False.
        """
        try:
            module: IncludeMeta = sys.modules[__name__]

            for middleware in self.factory(module):
                target_middleware = self.outer_middleware and \
                    router.message.outer_middleware or router.message.middleware
                target_middleware.register(middleware)
                self.logger.info(f"Registered middleware: {middleware}")
            return True
        except Exception as e:
            self.logger.warning(f"Error while registering middlewares: {e}")
            return False


__all__ = [
    "AdvancedThrottleMiddleware",
    "SimpleI18nMiddleware",
    "IncludeHelper",
]
