services:
  postgres:
    image: postgres:17.4-alpine
    container_name: pg-db
    volumes:
      - pg_db:/var/lib/postgresql/data:rw
      - /tmp/postgres-tmp:/tmp:tmpfs
    networks:
      - rloc_net
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres  -c max_connections=1000
                -c shared_buffers=256MB
                -c effective_cache_size=768MB
                -c maintenance_work_mem=64MB
                -c checkpoint_completion_target=0.7
                -c wal_buffers=16MB
                -c default_statistics_target=100
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data
    env_file:
      - .env

  telegram-bot:
    build: .
    container_name: tg-bot
    volumes:
      - static:/var/abcdefg/static:ro
    networks:
      - rloc_net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      PG_HOST: ${POSTGRES_HOST}
      PG_USER: ${POSTGRES_USER}
      PG_PASS: ${POSTGRES_PASSWORD}
    env_file:
      - .env

volumes:
  pg_db:
  static:

networks:
  rloc_net: